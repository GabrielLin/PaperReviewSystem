软件学报中国科学院软件研究所版权所有一种基于特征矩阵的软件脆弱性代码克隆检测方法甘水滔秦晓军陈左宁王林章数学工程与先进计算国家重点实验室无锡江南计算技术研究所江苏无锡计算机软件新技术国家重点实验室南京大学江苏南京通讯作者甘水滔摘要提出了一种基于特征矩阵的软件代码克隆检测方法在此基础上实现了针对多类脆弱性的检测模型基于对脆弱代码的语法和语义特征分析从语法分析树抽取特定的关键节点类型描述不同的脆弱性类型将种基本克隆类型细化拓展到更多类通过遍历代码片段对应的语法分析树中关键节点的数量构造对应的特征矩阵从公开漏洞数据库中抽取部分实例作为基本知识库通过对代码进行基于多种克隆类型的聚类计算达到了从被测软件代码中检测脆弱代码的目的与基于单一特征向量的检测方法相比对脆弱性特征的描述更加精确更具有针对性并且弥补了形式化检测方法在脆弱性类型覆盖能力上的不足在对代码的测试中发现了个脆弱性对不同规模软件代码的测试结果表明该方法的时间开销和被测代码规模成线性关系关键词脆弱性检测代码克隆语法分析树特征矩阵中图法分类号中文引用格式甘水滔秦晓军陈左宁王林章一种基于特征矩阵的软件脆弱性代码克隆检测方法软件学报英文引用格式基金项目国家自然科学基金收稿时间修改时间定稿时间甘水滔等一种基于特征矩阵的软件脆弱性代码克隆检测方法部分软件代码脆弱性如缓冲区溢出内存多次释放指针误用竞争条件资源泄漏格式串溢出整数溢出原子性错误等在语法和语义规则方面与程序设计语言的正确特性相违背通过形式化的方法可以检测但对于认证绕过域保护不当函数不恰当选项后门代码等脆弱性类型往往在代码形式上并不违背正确的语法和语义特征常用的基于规则检查的方法难以识别另一方面代码复用在软件开发过程中极其常见如果被复用的代码源中存在脆弱性那么新建立的代码往往会延续同样的问题对于上述两种情况如果建立一个已发现的脆弱性代码数据库从代码的相似度层面进行检测查找某个软件系统出现的脆弱性代码在其他软件中的分布情况就可以检测出更多的脆弱点有效弥补静态分析方法在脆弱性检测类型和漏报方面的不足与基于规则检查的静态分析方法相比基于克隆检测方法的脆弱性检测技术所具备的优势如下克隆检测方法从被测代码与脆弱代码的相似度入手能够检测无法用语法或语义规则描述的脆弱性结合预定义脆弱性知识库容易从词法级别对测试对象进行无关代码的过滤降低了开销可以应用于大规模代码的检测通过脆弱性知识库的扩展不仅可以进行脆弱性检测而且提供了自动修补的可能性克隆检测方法现状及脆弱性检测应用分析克隆代码是指软件系统中存在的相同或相似的代码片段现代软件技术利用面向对象技术设计模式泛型编程基于构件编程面向方面编程简称等强调高度的软件复用同时也导致了脆弱性的扩散由于缺乏追踪机制和手段一旦被复用代码携带了某些脆弱性一来难以得到及时的修补存在严重的安全隐患二来即使得到修补也可能要付出过大的代价面向源代码的代码克隆检测方法通过建立特定的脆弱性代码数据库对相关软件源代码进行克隆检测分析挖掘软件中与脆弱性代码库相关的克隆代码能够快速和有效地定位高风险脆弱性代码克隆有多种类型被普遍认可的是等人的分类这种分类方法从程序代码的词法和语义上把克隆代码的基本类型归纳为如下种类型两克隆代码片段之间除了空白和注释有差异外其他部分完全相同类型两克隆代码片段之间除了空白注释变量名变量类型及常量值等词法特征有所差异外其他部分的语法结构完全相同类型两克隆代码片段之间除了类型中的差异外还有少量的语句增减及修改类型两克隆代码片段语义相同但语法结构不同通过对等公开漏洞库的调查可以发现不同的软件系统中出现大量由于代码克隆引入的脆弱性原因来自于代码复制软件系统在同一框架下进行开发或者围绕某个软件系统进行的第三方软件开发具体可分为种情况不同的软件系统之间使用了相同的代码库主要在代码结构函数名称参数变量常量操作符方面有高度的相似度不同的软件系统之间使用了相同的函数库或不同的软件系统之间使用了相同的算法协议或产品说明书从年开始出现了克隆检测技术在软件脆弱性挖掘领域的应用研究爱荷华州立大学的等人提出的原型系统设计了和两种模型利用抽象语法树描述代码库复用引发的脆弱性利用有向图描述复用引发的脆弱性这两个模型利用的特征向量提取方法统计关键节点和节点组合的出现次数构造特征向量通过整理的个开源软件系统个版本中发布的个漏洞用以检测模型性能定位了多个软件系统中的脆弱性等人在年开发原型系统利用程序依赖图解析脆弱性代码和被测代码信息将系统依赖图划分成多个节点数量较少的子图提取其中脆软件学报弱性敏感的函数调用节点通过图的同构匹配算法查找近似脆弱性的代码收集了来自多个开源程序的个公开漏洞代码在对下的多个开源应用程序的测试中准确定位了其中的个脆弱性由国内外研究文献可知目前克隆检测方法在脆弱性检测领域的应用较少只出现了和两个原型系统从中可以发现其中存在的诸多难点准确的脆弱性量化特征提取在代码相似性度量层面需要对代码特征进行量化即把软件转化为各种中间代码表示形式在其上进行相关词法或语义的量化和抽取针对不同类别的脆弱性需要对脆弱性的机制原理程序设计语言相关特性进行高度的特征抽象而且该特征集合必须能够较好地区分脆弱性代码和正确代码以免后期测试中出现大量的虚报因此量化特征的提取需要针对已发现的脆弱性做大量针对性的工作准确而又能够覆盖多种类别脆弱性的特征提取是该技术应用的主要难点之一脆弱代码知识库的构建脆弱代码知识库是克隆检测方法的基础库内容的详细程度对检测效果有决定性的影响而且需要根据检测方法的不同对库中每个漏洞建立诸如词法特性语法特性等多种条目工作量巨大另一方面公开漏洞库中的漏洞描述信息一般过于模糊多数情况下需要结合补丁比较定位具体代码还需要过滤冗余代码提取最具脆弱特征的相关代码这需要对各种脆弱性类型有深入准确的机制原理分析此外还需要对克隆源和被测目标软件代码使用的开发环境进行分析找出开发过程所使用的代码库函数库功能模块中可能存在的脆弱性代码切分脆弱性相关代码的复用在软件系统的开发过程中普遍存在但大部分复用的是修补过的正常代码由于脆弱代码和修补代码之间存在的差异大多是微弱的可能造成过高的虚报率克隆检测中代码切分的完备性决定了漏报的可能性一般树和图两类克隆检测通过划分成子树和子图进行代码分片但是代码分片的细粒度越小检测的时间复杂度越高需要合理地进行代码切分以控制脆弱性漏报的程度脆弱性类型和克隆代码类型对克隆代码分析的影响和两个系统都既不区分脆弱性类型也不区分克隆代码类型在脆弱性特征提取上采用统一的标准会弱化不同类型脆弱性的差异引发虚报或漏报中间代码的选择必须将测试对象转换成易于理解和遍历的中间代码形式脆弱性特征的描述也是在中间代码上进行的好的中间代码设计也是该技术应用的关键点和难点之一为了克服以上提出几个难点本文提出了一种基于特征矩阵的代码克隆检测方法的多类脆弱性检测模型在脆弱性量化特征提取脆弱性知识库的构建和中间代码的选择等重要技术环节中采用了大量先验和后验信息完成了原型系统构建在对等开源代码的测试过程中准确地发现了其中的多个脆弱点表现出较好的脆弱性检测能力和运行效率其基本思路如下考虑了脆弱性特征和代码克隆类型对检测结果的影响本文基于对脆弱代码的语法和语义特征分析将种基本克隆类型细化拓展到更多类利用语法分析树提取不同类型的克隆代码特征构造被测代码的特征矩阵其中的每个特征向量表示一种克隆类型对应的特征通过分析脆弱性特征与代码克隆类型的对应关系构造脆弱代码的特征矩阵最后对脆弱代码和被测代码的特征矩阵进行聚类操作完成更高精度的脆弱性检测采用一种半自动化方法采集公开漏洞代码利用中提供的大量开源项目版本和代码资源一方面人工从绿盟的公开漏洞报告信息获取大概漏洞代码信息版本关键函数名称或文件位置等另一方面基于提供的正则表达式实现对不同版本中漏洞相关代码的比较提取准确的脆弱代码综合程序依赖图和抽象语法树两种代码表示结构的优势分别应用于代码克隆检测的不同环节利用基于程序依赖图的切片分析对被测代码进行初步的代码子集划分每个代码片段的语句都成数据依赖和控制依赖关系由于图的结构不便于遍历操作本文在特征提取环节采用树的结构进行遍历甘水滔等一种基于特征矩阵的软件脆弱性代码克隆检测方法通过限定树的节点数目做进一步的代码划分与已有工作相比基于特征矩阵的检测方法对脆弱代码具有更好的针对性结果更为精确基于特征矩阵的代码克隆检测方法的多类脆弱性检测模型模型框架整体框架如图所示主要研究内容包括以下个模块多类脆弱性量化特征分析建立脆弱性数据库代码切片不同脆弱性的克隆引入类型分析语法分析树转换不同克隆代码类型的语法分析树特征提取特征向量和特征矩阵的生成无关代码过滤脆弱代码和被测代码的聚类图模型框架多类脆弱性量化特征分析系统对中的多个脆弱性报告人工分类分析在等软件系统中发现了大量克隆脆弱性实例本文结合人工分析筛选了数据库中的个漏洞报告利用词法分析技术分成相关的个子集发现其中的个子集中的个脆弱性是克隆代码引发的脆弱性模型通过对不同类别的脆弱性机制原理分析针对格式串溢出脆弱性安全系统调用整数溢出竞争条件资源保护不当后门代码资源泄露函数不恰当参数认证缺失等类型脆弱性分析各自在克隆代码过程中的变化情况结合对应代码的语法分析树提炼可以表达各种脆弱性类型信息的节点或节点结构信息以区别其他代码有效降低虚报率建立脆弱性数据库针对特定的测试目标软件选择功能相关开发框架相关的软件系统作为克隆源基于漏洞数据库提取克隆源中与脆弱性相关的代码特征作为脆弱性挖掘的知识库脆弱性知识库是整个模型脆弱性挖掘能力的基础知识库中脆弱性类别和各类脆弱性条目的数量决定了对测试目标未知脆弱性挖掘能力的差异代码切片该环节主要是对当前克隆检测方法在脆弱性检测领域应用不足提出的优化目前主流的克隆检测方法中基于图的检测方法能够准确定位与控制流信息和数据流信息相关的代码可解决不连续代码的检测问题但图遍历的复杂度制约该方法在大规模代码上的应用树结构便于遍历基于树的克隆检测方法可以实现测试的完备性但只能实现对连续代码的测试基于度量值的检测方法可以实现快速测试适用于大规模代码目标软件但对代码的量化特征提取是实现克隆检测的关键针对以上方法的优缺点模型首先利用代码切片方法基于图将测试目标软件中功能相关的非连续代码提取组合成连续代码把目标软件切分成多个连续代码块然后使用语法分析树和量化特征度量实现对连续代码块的测试若实现上该步骤使用工具对程序依赖图进行静态切片提取切片后程序不同脆弱性的克隆引入类型分析针对筛选的公开漏洞库中的脆弱性代码需要对每个脆弱性条目进行类型划分结合脆弱性机制原理分析软件学报梳理各个条目可能引发的克隆代码形式以确定对应的特征矩阵提取如图所示图脆弱性的克隆类型分析语法分析树转换针对上一个环节抽取的代码片段实现代码到语法分析树的映射语法分析树采用树的形式表达源代码语法语义结构逻辑信息其中叶子节点代表源代码某个词法单元中间节点的类型可能是某个变量类型声明语句赋值语句算术运算语句判断语句循环语句或函数实现过程等一棵子树表示一段连续的源代码每段代码被解析成由多种类型的节点构成的语法分析树不同克隆代码类型的语法分析树特征提取特征提取是整个模型的核心环节需要理解语法分析树的各种节点类型通过分析不同形式的克隆代码和原始代码的词法语法差异提取表达代码相似性的相关节点忽略体现代码差异的相关节点每个代码片段可能有多种克隆形式需要进行多种语法节点的提取形成不同克隆代码类型的特征集合特征向量和特征矩阵的生成模型通过统计各相关节点在语法分析树中出现的次数以构造相应的特征矩阵对于脆弱性知识库中的脆弱代码和待测的目标代码片段需要分别生成预定义的各克隆类型所对应的不同特征向量以构成特征矩阵特征矩阵是对特征向量的扩展只需对语法分析树进行一次遍历无关代码过滤针对庞大的被测源代码集合在进行聚类分析之前需要过滤无关的代码片段以降低空间和时间开销本文采用两种过滤方法第种是基于文本的过滤方法利用词法分析技术从脆弱代码库中提取脆弱性关键字然后扫描测试源代码过滤与脆弱性关键字无关的部分第种是基于结构的过滤方法计算脆弱代码片段的特征向量和被测代码片段的特征向量的相关度过滤相关度较低的测试片段脆弱代码和被测代码的聚类经过前几个步骤每一个脆弱代码和被测代码片段都生成了一个特征矩阵本步骤对两个特征矩阵集合中的特征向量进行聚类运算以发现可能存在的克隆对检测脆弱性是否存在不同克隆代码类型的语法分析树特征提取程序代码的语法分析树的叶子节点用代码的词法单元表示图是表中的一段代码简化过的语法分析树及特征向量生成表示的示例甘水滔等一种基于特征矩阵的软件脆弱性代码克隆检测方法表节点类型编号节点命名种克隆代码形式的语法分析树关键节点信息节点表示克隆代码克隆代码信息类型类型循环结构一条语句声明操作自加操作比较操作普通变量环境变量赋值操作大括弧包含的程序乘法操作加法操作常量变量类型函数调用函数名称函数参数注表示关键节点表示非关键节点克隆代码类型克隆代码类型克隆类型克隆类型一段原始代码克隆类型克隆类型图节点属性包括以下内容一段代码简化过的语法分析树及特征向量生成表示软件学报相关节点一棵简化的语法分析树的所有类型节点即从完全的语法分析树节点中抽取出与所需代码特征相关的节点排除无关节点构成简化的语法分析树图中的相关节点包括表中的种节点不相关节点不列入特征向量计算图中没有显示相关节点的不同属性组合成特征向量的不同元素相关节点可分为关键节点和非关键节点关键节点表征需研究的代码片段特征的节点必须生成相对应的统计特征向量或矩阵并且要作为克隆检测的主要计算对象图中的关键节点包括和非关键节点不影响克隆检测结果但在生成关键节点特征向量或矩阵的过程中可能会使用到的节点图中的非关键节点包括非关键节点作为子树的根节点时需要统计特征向量但自身不具备统计效应终止节点只连接一个词法单元的节点可以是关键节点也可以是非关键节点图中是终止节点也是非关键节点在特征向量提取过程中忽略合并节点需要和相邻的兄弟节点特征矩阵合并的节点合并节点本身无含义仅为便于计算而设立特征矩阵相关的处理步骤主要包括以下步特征向量生成特征向量按所属的不同克隆类型从语法分析树提取需要提取所有相关节点的信息对于表中的原始代码其中的循环代码具有种克隆形式表中结合代码特点抽取了语法分析树中的种节点类型作为相关节点每段连续的代码子树的特征向量由维向量构成即根据不同类型的克隆代码和原始代码差异定义了各自的关键节点使得原始代码和克隆代码之间的语法和语义特征能够充分体现图中的语法分析树对应第种克隆代码类型其中定义了个非关键节点和第种克隆形式改变了整个语法结构需要通过定义节点节点及节点因篇幅关系表中省略了该节点描述为非关键节点来隐藏不同的循环结构差异代码中出现了某些参数变量的增添和删减操作因此将和节点定义为非关键节点来隐去参数和变量带来的代码差异为清晰起见图中描述的特征向量忽略了个非关键节点用维向量来描述语法分析树中的节点可能有两种作用一种是作为单个节点出现只代表节点本身另一种是作为子树的根节点出现代表整个子树当作为单个节点时需要初始化特征向量非关键节点用零向量初始化关键节点用对应的单位向量初始化例如节点初始化为节点初始化为等当树中的节点描述为某子树的根节点时其特征向量为其对应的不同类型关键子节点出现的频数和如图中节点代表的子树特征向量计算为该特征向量为孩子节点特征向量的累加即等节点特征向量的累加和特征矩阵生成特征矩阵的生成是对特征向量生成的一个扩展表中的特征矩阵生成是矩阵到矩阵的扩展操作每个特征矩阵的行向量对应一种克隆代码形式的关键节点向量非关键节点默认为图是对根节点的特征矩阵的生成描述其特征矩阵为所有子节点特征矩阵和节点初始化特征矩阵的累加和模型需要对整棵树进行一次后序遍历操作生成某些节点的特征矩阵特征矩阵合并单个根节点的特征矩阵只能映射到部分的连续代码片段大部分连续代码片段的特征矩阵需要通过对相邻节点进行合并操作生成合并操作需要设置参数控制合并节点的数量该参数与节点的词法单元总数合并节点数量相关选取的原则是尽可能地降低误报率在图中特征矩阵是合并了等个相邻的兄弟节点甘水滔等一种基于特征矩阵的软件脆弱性代码克隆检测方法特征矩阵可映射到这段连续的代码合并的特征矩阵节点特征矩阵图节点的特征矩阵生成关键算法描述定义代码特征矩阵一棵由种节点类型的语法分析树构成了一张符号表为所有节点类型数量程序代码的特征符号矩阵以符号代替真实数值用描述对于中的任意元素满足一段具体代码对应的特征矩阵用表示为使用到的代码克隆类型数量其中为第个维特征向量描述为表示第种克隆类型对应的特征向量其中表示第种语法节点或多个节点的组合出现的次数为选择的相关节点类型数量定义级原子树模式和级特征向量一个级原子树式是一棵高度为的完全二叉树对于给定的标签集其中包括空标签最多包含个不同的模式对于树对应的级特征向量用表示其中表示为树中第个级原子模式的出现次数注本模型为级特征向量定义偏序关系对于特征符号矩阵中任意两个符号向量如果满足对于使得那么偏序关系具有传递性定义向量距离度量对于维向量和两向量汉明距离为两向量的欧式距离为定义偏序关系和向量距离相关关系对于特征符号矩阵中的向量和若存在偏序关系那么对于代码片段和符号向量和所对应的代码中的特征向量分别为和所对应代码中的特征向量分别为和满足向量距离其中是任意距离度量定义类克隆对关系对于代码片段集合代码的特征符号矩阵代码片段集合对应的特征矩阵集合为对于任意的如果存在第维特征向量满足为人工设定的阈值那么代码片段和成类克隆对软件学报关系定义脆弱代码报告对于被测代码片段和脆弱代码片段成克隆对关系代码为脆弱代码修补过的正常代码如果满足那么代码片段为克隆后脆弱代码本模型的整个脆弱代码检测过程包括多个关键算法和设计细节以下对从其他文献中引用的算法环节仅进行标注只对本文提出的关键算法进行较为详细的描述脆弱代码知识库的形成本模型主要以数据库和绿盟安全漏洞数据库为参考数据源结合分析脆弱性代码和补丁代码信息针对这个开源软件系统分别定位了条条条条条条脆弱性代码包括了格式串溢出脆弱性安全系统调用整数溢出竞争条件资源保护不当后门代码资源泄露函数不恰当参数和认证缺失共种脆弱性类型对每个脆弱性代码片段存储代码所在的整个函数并通过人工分析方式过滤其中的无关代码对脆弱性代码和补丁代码进行词法标注便于后续克隆检测算法的识别代码切片利用前向程序切片方法基于不同的程序变量从被测代码中提取与该变量有控制依赖关系和数据依赖关系的代码片段由于变量间可能存在的相关性这些代码片段之间有可能存在包含关系再引用语义线程的思想对代码片段进行合并从被测代码中切分出一个没有冗余代码片段的最小划分集合语法分析树节点筛选本模型使用将每个源代码文件解析成由种节点类型构成的语法分析树根据需要选择了其中的种作为相关节点类型关键节点类型的选择不仅与基本克隆类型有关而且需要考虑待检测脆弱性的代码特征以和为例这两个脆弱性分别出现在和中都是因为没有对库中函数的返回值进行验证而引发了远程的安全认证绕过脆弱性但这两个脆弱性的函数参数完全不一致为描述这两段代码的相似性关键节点类型中不应该包括表示参数类型参数数量和参数名称等节点类型漏洞同时出现在和中脆弱性相关的代码片段只有调用函数的第个参数名称不同因而从语法分析树中选择关键节点类型时不应该包括表示参数名称相关的节点类型空指针脆弱性出现在中的函数和函数中这两个函数功能一样但名称不同而为整数类型转换引发的脆弱性出现在和中只是函数中的代码结构和某些变量类型存在差异因此选择关键节点类型时应针对不同的脆弱性类型或代码片段分析该脆弱性可能呈现的各种克隆代码特征以更加准确地描述种基本克隆代码类型中任意一种类型呈现的多种形式为了更充分地体现脆弱性代码的语法和语义特征提高检测的针对性本文通过对知识库中种脆弱性类型的分析将种基本克隆类型进一步细化为种分别定义其中的关键节点其中最少的克隆类型包含种关键节点最多的有种总相关节点种类为实现上把每个代码片段映射成的特征矩阵特征矩阵生成代码片段的特征矩阵包括脆弱代码片段和被测代码片段的特征矩阵对脆弱代码基于脆弱代码知识库将一个脆弱性条目切分成包含不同词法单元的多个脆弱代码片段由于利用自动遍历计算其子树映射的脆弱代码子集可能会产生多个不包含核心脆弱代码语句的代码片段导致过高的虚报率因此本模型利用人工切片分析确保切分出的脆弱代码片段都必须包含最核心的脆弱代码语句完成切分后生成每个脆弱代码片段的单个特征矩阵同时记录相应的词法单元数量最后将脆弱代码片段中最大词法单元记为最小词法单元数量记为对被测代码集合采用后缀方式对代码片段的语法分析树进行遍历选择词法单元数量在范围中的子树生成相应的特征矩阵算法描述了被测代码的特征矩阵遍历生成过程甘水滔等一种基于特征矩阵的软件脆弱性代码克隆检测方法算法特征矩阵遍历生成算法输入代码片段对应的语法树特征符号矩阵输出特征矩阵集合把各种类型的相关节点映射到具体的整数索引值初始化关键节点个体的特征矩阵对树进行节点后缀遍历树的词法单元数量脆弱代码的词法单元数量范围中特征矩阵合并和分组由于被测代码的单个节点对应的特征矩阵集合不能覆盖大部分代码的子集需要对某些相邻的兄弟节点进行合并操作以扩大特征矩阵集合本模型使用的树的兄弟节点合并算法与的节点合并算法有所差异不使用一个固定长度的滑动窗口控制需合并的相邻节点的数量而是对词法单元总数处于范围中的相邻节点进行合并特征矩阵分组是把词法数目相近的脆弱代码片段和被测代码片段划分到一个组中分别对各个组进行克隆对检测防止词法偏差较大的代码片段被误报为克隆对偏序关系分组根据种克隆类型定义的符号向量需要对个符号向量进行偏序关系分组目的是为了减少克隆对检测的冗余操作对于一个偏序关系组的两个符号向量如果针对两个代码片段如果和成类克隆对关系那么和也成类克隆对关系偏序关系分组可以为代码片段的克隆对进行分组检测从而减少软件学报重复操作偏序关系分组算法如下算法偏序关系分组算法输入特征符号矩阵输出存在偏序关系的符号向量分组集合不同类克隆对检测对于个向量传统的聚类算法需要对聚类对象做两两空间距离的计算复杂度为对往往高达百万量级的开销巨大本模型采用基于局部敏感哈希简称的聚类方法只需对向量做一次哈希运算聚类操作的时间开销接近线性局部敏感哈希函数是聚类方法的关键环节对两个向量该函数产生的哈希代码的相似概率和两向量的距离成严格递减的关系两向量距离越小哈希代码相同的概率就越大利用局部敏感哈希函数可以把向量对应的代码映射到某个整数区域也可以是某个具体的整数中代码片段的相似程度越高映射到相同区域的概率就越大本文利用曼哈顿距离度量向量的相似性如果则概率计算公式为在该公式中为向量为固定的正实数为中的某个随机数为关于的递减函数对于满足对于两个向量满足当时其中也就是说若两向量距离在范围内则至少以的概率映射到同一个整数上若两向量距离在范围外时则最多以的概率映射到同一个整数上为了减少误差将采用一族独立的哈希函数每个向量在哈希函数族的映射下产生一个整数向量最后生成的数值为其中为随机选择的整数为一个较大的素数这样若两向量距离在范围以内则至少以的概率映射到同甘水滔等一种基于特征矩阵的软件脆弱性代码克隆检测方法一个整数上若两向量距离在范围以外则以最多的概率映射到同一个整数上本模型采用个独立的哈希函数族每个向量将被映射到的独立的数据域中如果原本符合克隆关系的向量和在某个哈希函数族中被漏报了那么在其他的函数族中仍存在被报告的机会两向量被个哈希函数族漏报的概率不超过如果足够大则这个概率几乎为为了减小不同类克隆对间的相互干扰本模型随机挑选多个代码片段通过对各自特征矩阵的不同向量进行聚类学习出合适的阈值使得绝大部分特征矩阵中的特征向量体现出差异算法和算法给出了特征矩阵组的克隆对检测算法算法利用聚类进行特征矩阵相似性检测算法输入被测代码的特征矩阵集合脆弱代码的特征矩阵集合输出不同脆弱代码片段的克隆对报告选择脆弱代码的特征矩阵算法脆弱代码的特征矩阵集合中的特征矩阵输入脆弱代码的特征矩阵集合中的特征矩阵被测代码的特征矩阵集合相似度度量阈值存在偏序关系的符号向量分组集合输出返回的与脆弱代码片段成克隆对关系的被测代码片段集合用来存储被测代码片段和成克隆对关系时的符号向量类别集合按照偏序大小关系选择软件学报针对第个符号向量对所有的被测代码片段进行哈希聚类生成与脆弱代码相似度大于阈值的特征向量集合对应的被测代码特征矩阵集合脆弱性代码检测被报告为和脆弱代码片段成克隆对关系的被测代码片段有可能是对修补过的脆弱代码的克隆可按照定义中的脆弱性检测方法进一步提高被测代码片段的脆弱性报告精度算法较为简单不再赘述测试与分析我们从公开漏洞库中筛选了条脆弱代码包括中条中条中条中条中条中条作为检测工具测试的知识库表给出了脆弱代码的相关软件信息表脆弱代码知识库克隆知识源漏洞代码条目选择与脆弱代码所在的软件功能和开发框架相似的和这个代码规模不一的软件对象进行了测试表给出了各个对象的脆弱点报告数量以及时间开销表测试软件版本测试软件基本信息脆弱点报告数量特征矩阵时间开销特征矩阵脆弱点报告数量特征向量时间开销特征向量分秒分秒分秒分秒分秒分秒分秒分秒分秒分秒甘水滔等一种基于特征矩阵的软件脆弱性代码克隆检测方法在表中脆弱点报告数量特征矩阵是指在考虑不同脆弱代码的克隆类型情况下对测试代码片段进行特征矩阵提取利用代码克隆方法检测出的脆弱点报告数量脆弱点报告数量特征向量是指对测试代码片段进行特征向量提取即在不考虑脆弱性类型的情况下用统一的节点类型构造特征向量利用代码克隆方法检测出的脆弱点报告数量从表的数据可以分析出特征向量方法的时间开销相对降低了左右但脆弱点报告数量增加了数倍极大地增加了后续人工对脆弱点报告进一步审查的工作量表给出了对以上个软件对象的脆弱点具体报告情况其中特征矩阵方法特征向量方法表示表中的特征矩阵和特征向量两种关键节点抽取方法而静态分析方法代表商业化静态分析工具用到的检测方法表示检测到相应行中的漏洞表示未检测到相应行中的漏洞对被测软件的克隆脆弱性报告表脆弱性测试软件克隆公开漏洞脆弱性类别堆溢出指针误用指针误用条件竞争格式串溢出认证缺失认证缺失整数溢出不恰当参数资源保护不当所在位置特征矩阵方法特征向量方法静态分析方法可以看出在考虑不同脆弱代码的克隆类型情况下利用特征矩阵方法在中发现了个堆溢出相关的脆弱性在中发现了个公开漏洞克隆出来的脆弱性包括条件竞争认证缺失整数溢出不恰当选项等多个类型的脆弱性在特征矩阵方法检测的上述脆弱点中利用特征向量方法漏报了其中的个关于认证缺失不恰当选项整数溢出的脆弱性利用商业化静态分析工具检测漏报了其中的个脆弱性可以看出本文提出的基于特征矩阵的克隆检测方法在考虑脆弱性代码的语法和语义特征情况下对脆弱性的检测结果更为理想降低了漏报率和虚报率从表可以看出在个报告中初步核查即发现处高风险脆弱性具有较低的虚报率图给出了对个目标的测试时间开销从图可以看出测试时间和被测软件代码规模基本成线性增长关系表脆弱性的模块分布模块文件系统模块内核初始化程序模块内存管理程序模块内核管理核心模块设备驱动模块网络模块核心进程通信模块体系结构核心模块加密模块声音系统架构模块所在位置脆弱点数量软件学报时间开销测试软件代码规模图结测试时间和代码规模的关系论本文通过对源代码脆弱性机制原理分析提出了一种基于特征矩阵的代码克隆检测方法的多类脆弱性检测模型利用对语法分析树的节点类型分析抽取特定的关键节点类型描述不同的代码克隆类型通过遍历计算代码片段对应的语法分析树中关键节点的数量构造代码对应的特征矩阵模型利用一种半自动化方法从公开漏洞数据库中抽取脆弱性代码作为克隆检测的脆弱代码知识库通过对同一代码进行多次聚类计算可以有效降低漏报率最后在对多个开源系统软件和应用软件进行的脆弱性检测测试中取得了良好的效果准确地定位了多个脆弱点实验结果显示具有较好的脆弱性类型检测能力能发现目前主流静态分析工具能力之外的多种脆弱性秦晓军甘水滔陈左宁一种基于一阶逻辑的软件代码安全性缺陷静态检测技术中国科学信息科学甘水滔等一种基于特征矩阵的软件脆弱性代码克隆检测方法附中文参考文献著肖枫涛杨明军译一个都不能有软件的个致命安全漏洞北京清华大学出版社甘水滔男江西靖安人博士生陈左宁女高级工程师博士生导工程师会员主要研究领域为网络安师中国工程院院士会士主要研究全软件理论及安全性分析领域为软件理论操作系统秦晓军男博士高级工程师王林章男博士教授高级学生会员主要研究领域为网络安全会员主要研究领域为模型驱动的软件测试与验证安全测试软件测试自动化
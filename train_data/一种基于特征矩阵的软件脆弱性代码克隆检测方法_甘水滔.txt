 ISSN 1000-9825, CODEN RUXUEW
Journal of Software,2015,26(2):348−363 [doi: 10.13328/j.cnki.jos.004786]
©.

E-mail: jos@iscas.ac.cn
http://www.jos.org.cn
Tel: +86-10-62562563



∗

 1,  1,  1,  2
1

((), 

2

((), 

214083)

210023)

: , E-mail: ganshuitao@gmail.com



:

.,.

,, 4 
,,.
,,
.,,,
. android-kernel  9 .
,.
: ;;;
: TP311
: ,,,..,2015,26(2):
348−363. http://www.jos.org.cn/1000-9825/4786.htm
: Gan ST, Qin XJ, Chen ZN, Wang LZ. Software vulnerability code clone detection method based on characteristic
metrics. Ruan Jian Xue Bao/Journal of Software, 2015,26(2):348−363 (in Chinese). http://www.jos.org.cn/1000-9825/4786.htm

Software Vulnerability Code Clone Detection Method Based on Characteristic Metrics
GAN Shui-Tao1,

QIN Xiao-Jun1,

CHEN Zuo-Ning1,

WANG Lin-Zhang2

1

(State Key Laboratory of Mathematical Engineering and Advanced Computing (Jiangnan Institute of Computing Technique), Wuxi

2

(State Key Laboratory for Novel Software Technology (Nanjing University), Nanjing 210023, China)

214083, China)

Abstract:

This article proposes a clone detection method based on a program characteristic metrics. Though analyzing the syntax and

semantic characteristics of vulnerabilities, this detection method abstracts certain key nodes which describe different forms of
vulnerability type from syntax parser tree, and expands four basic types of code clone to auxiliary classes. The characteristic metrics of
the code then is finalized by obtaining the number of key nodes which are calculated via scanning corresponding code segment in the
syntax parser tree. The clone detection based on a characteristic metrics creates basic knowledge base by extracting partial instances of
open vulnerability database, and precisely locates the vulnerability codes by performing cluster calculation on the same codes responding
to multiple types of code clone. Comparing with the detection method based on single characteristic vector, the proposed method produces
more precise description about vulnerability. This detection method also offers a remedy to the drawbacks of formal detection method on
its vulnerability type covering ability. Nine vulnerabilities are detected in an android-kernel system test. Testing on software of different
code sizes shows that the performance of this method is linear with the size of the code.
Key words:

∗

vulnerabilitydetection; codeclone; syntax parser tree; metrics of characteristics

: (91318301, 61170066, 6147179)
: 2014-07-09; : 2014-10-31; : 2014-11-26

 :

349

,、、、、、、
、, [1,2],
,、、、,
, [3−8].,
,,.,
,,
,,
.
,:
1)

,
.

2)

,,,
.

3)

1

,,.


.、、

、、(aspect oriented programming, AOP),
.,,
,;,.
,,
,.
, Roy [9].
 4 :
1)
2)

 1:,.
 2:、、、,
.

3)

 3: 2 ,.

4)

 4:,.

 NVD,CVE ,
,、,.
 3 :
1)

,、、、、
;

2)

 API;

3)

、.

 2010 ,, Pham 
 SecureSync [10,11] xASTs  xGRUMs :xASTs 
,xGRUMs  API . Exas ,
.SecureSync  119 (176 )
 60 ,.Li  2011  CBCD [12],
,,

Journal of Software  Vol.26, No.2, February 2015

350

,.CBCD 
53 , Linux  20 .
,, SecureSync  CBCD
,:
1)

.,,,
,.,
、,
,.,
.,
.

2)

.,
,,、
,.,,
,,,
.,,
、、.

3)

.,
 [13].,.
,,
,,,
.

4)

.SecureSync  CBCD 
,.,
,.

5)

.,
,.

,
CVdetector,、
,. android-kernel,dnsmasq ,
,.:
1)

.
, 4 ,
,;
,
,.

2)

, Google code search[14]
, CVE、NVD、(、
);, Google code search 
,.

3)

,.
,
.,,

 :

351

.
,,.

2



2.1 CVdetector
CVdetector  1 , 9 :、
、、、、
、、、.

Fig.1
1

CVdetector’s framework
CVdetector 

(1) 
SecureSync    US-CERT           , Firefox,Thunderbird,SeaMonkey,
Tomcat ., CVE  980 ,
 100 , 18  42 .
CVdetector ,、、、
、、、、、,
,,
,,.
(2) 
,、,
,. CVdetector 
,.
(3) 
.,
,,
.,
,.,,
.,CVdetector 
(),
,., codesurfer [15]
[16],.
(4) 
,,,

Journal of Software  Vol.26, No.2, February 2015

352

,. 2 .

Fig.2

Clone type analysis of vulnerability
2



(5) 
,,
、.,,、
、、、、,,
.
(6) 
,,
、,,.
,,.
(7) 
,.
,.
,.
(8) 
,,.
: 1 ,,
,; 2 ,
,.
(9) 
,,
,,.
2.2 
. 3  1 
.

 :

Table 1

Syntax analysis tree’s key node information of 4 clone code forms
1



1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16



for
stmtexp
decl
incr
cond
vari
para
assign
block
mul
add
cons
type
fun_call
fname
fpara

353

4 





 1
 2
for 
√
√

√
√

√
√

√
√

√
√

√
√

√
√

√
√

√
√

√
√

√
√

√
√

√
×

√
√

√
√

√
√
:√,×


 3
√
√
√
√
√
×
×
√
√
√
√
×
√
√
√
√


 4
×
√
√
√
√
×
×
√
×
√
√
×
√
√
√
√

 4:
 1:
:
 2:
 3:
while (i<data){
for (int i=1; i<data; i++){
for (int i=1; i<data; i++){
for (u_int k=1; k<data1; k++){ for (int i=1; i<data; i++){ cont=cont+i;
cont=cont+i;
cont=cont+i;
cont=cont+i;
cont=cont+i;
dod=dod *i;
dod=dod *i;
dod=dod *i;
dod=dod *i;
dod=dod *i;
search(cont,dod,dat
search(cont,dod);
search(cont,dod);
search(dod,cont);
search(cont,dod,data); a);
/* xx */
}
}
}
i++;
}
}

Fig.3

Syntax analysis tree of a simplified code fragment and characteristic vector generation representation
3

:



Journal of Software  Vol.26, No.2, February 2015

354

1)

:,,
,,. 3  1  16 
,,.
,.

2)

:,,
. 3  stmtexp,decl,incr,cond,assign,mul,add,fun_call,
fname  fpara.

3)

:,
. 3  for,vari,para,cons,type,block.,
,.

4)

:,,. 3 ,type,vari,cons,
para ,,.

5)

:.,.

 3 :
(1) 
,. 1 
, for  4 , 1  16 
,() 16 .,(for,stmtexp,decl,incr,cond,vari,para,assign,block,
mul,add,cons,type,fun_call,fname,fpara).,,
. 3  4 ,
 6 :(for,vari,para,cons,type  block). 4 ,
 for 、block  which (,)
;、, vari,para  cons 
., 6 , 10 (stmtexp,
decl,incr,cond,assign,mul,add,fun_call,fname,fpara).
:,;
,.
•

,:,
.,vari (0,0,0,0,0,0,0,0,0,0),assign (0,0,0,0,1,0,0,0,0,0);

•

,,
 3  for ,(6,1,1,1,3,1,1,1,1,2),
,,for(0,0,0,0,0,0,0,0,0,0),stmexp(1,1,0,0,1,0,0,0,0,0),stmexp(1,0,0,1,0,0,0,0,0,0),stmexp(1,0,1,0,0,0,
0,0,0,0),block(3,0,0,0,2,1,1,1,1,2).

(2) 
, 1  16×1  16×4 
,, 0. 4  for 
, for .
.
(3) 
,
.,、
,. 4 , stmtexp  3 

 :

355

,“int i=1; i<data; i++”.
0311111100011000
0311111100010000
0311100100000000
0311100100000000

stmtexp



stmtexp

+

+
stmtexp

for
=
1611174311121112
1611174311120112
1611100311100112
0611100301100112

+
block
+

for
for

Fig.4

0110010100011000
0110010100010000
0110000100000000
0110000100000000

...

0100111000000000
0100111000000000
0100100000000000
0100100000000000

...

0101010000000000
0101010000000000
0101000000000000
0101000000000000

...

0300043211110112
0300043211110112
0300000211100112
0300000201100112

...

1000000000000000
1000000000000000
1000000000000000
0000000000000000

...

Characteristic matrices generation of “for” node
4

for 

2.3 
 1().  k  ψ ={τ1,τ2,…,τk},k 
,() SymM = [v1′, v2′ ,..., vn′ −1 , vn′ ]Tn× m . SymM 
 SymM[i][j], SymM[i][j]∈ψ . C  M : M = [v1 , v2 ,..., vn −1 , vn ]Tn× m , n
.,vi  i  m , vi=(xi1,xi2,…,xi(m−1),xim), i 
,,xij  j ,m .
 2(q- q-)[17].  q- q .
 L,ε, | L |2 −1 .
 T, q- vq (T ) = 〈b1 , b2 ,..., b 2q −1 〉 ,,bi  T  i  q-
q

| L|

( : 1-).
 3(  ).  SymM = [v1′, v2′ ,..., vn′ −1 , v′n ]Tn× m  vi′, v′j ,  : 
 ∀x ∈ vi′, ∃y ∈ v′j ,  y=x, vi′ ≤ v′j . .
 4().  m  v1={x11,x12,…,x1(m−1),x1m} v2={x21,x22,…,x2(m−1),x2m},
m

 DH (v1 , v2 ) =|| v1 − v2 ||1 = ∑ | x1i − x2i | , DO (v1 , v2 ) =|| v1 − v2 ||2 =
i =1

m

∑ ( x1i − x2i )2 .
i =1

 5 (  ).  SymM = [v1′, v′2 ,..., vn′ −1 , vn′ ]Tn× m  vi′  v′j ,
 vi′ ≤ v′j ,  C  C′, vi′  v′j  C  vi
 vj, C′ ui  uj, D(vi,ui)≤ D(vj,uj).,D .
 6(s-).  SetC={c1,c2,…,ck},:

SymM = [v1′, v2′ ,..., vn′ −1 , vn′ ]Tn× m .
 SetC  SetM={M1,M2,…,Mk}, Mi,Mj∈SetM, s(1
≤ s≤n) Mi[s],Mj[s], D(Mi[s],Mj[s])≤ σ,σ, ci  cj  s-

356

Journal of Software  Vol.26, No.2, February 2015

.
 7().  c  c′, fc′ c′
, D(c,c′)≤ D(c,fc′), c  c′.
 , 
,.

(1) 
 CVE , Google code search 
, Linuxkernel,dhcp,opensl,ntp,net-snmp,bind  6 , 96 、11 、

8 、 4 、 2 、10 ,、、、、
、、、 9 .,
 , , , 
.

(2) 
 , ,
 [18].  ,  ,  [19]
,.

(3) 
 EDG Front-end Parser  225 ,
 100 .
 ,  .  CVE-2009-

0021  CVE-2009-0047 , NTP  Gale , EVP  EVP_
VerifyFinal .
 , ,、 ;

CVE-2008-5023  Firefox  SeaMonkey , CanExecuteScripts
 2  ,
;BUGTRAQ id:36859  OpenBSD  ip_ctloutput  ip6_ctloutput  ,
; CVE-2011-2484 , openbsd  linux kernel ,
 drm_modeset_ctl .,,
 , 4 
.
,, 9 
, 4  10 ,., 56 
, 96 , 100., 100×10 .

(4) 
 .  ,
 . 
 , , ,
 , .  ,  M ′ 
, M ′ Tokens, MaxTokens,
 MinTokens.  , ,
[MinTokens,MaxTokens]. 1 
.

 :

357

 1.  CharacterMatrixGenerate.
:

T:;
SymM: [v1′, v2′ ,..., v′n −1 , v′n ]Tn× m .
:

SetM:.
1:

k←0, SetM←{∅}

//
2:

foreach relevant node

3:

id.node←k

4:

k←k+1

5:

endfor

// M0node
6:
7:

foreachsignificantnode
foreach vecter vi′ in SymM
if node is significant in vi′

8:
9:

M0node[i][id.node]←1

10:

endif

11: endfor
12: endfor
// T 
13: foreach node in T traversedin post-order
14:

M node ← ∑ M chindren ( node ) + M node

15:

if node is significant

Mnode←Mnode+M0node

16:
17:

endif

//
18:

if MinTokens≤ Tnodenumber≤ MaxTokens

SetM←SetM∪{Mnode}

19:
20:

endif

21: endfor
22: return SetM
(5) 
 , 
. Deckard[17]
 ,             ,       [MinTokens,

MaxTokens]  . 
,,.

(6) 
 10 , 10 ,
. vi′, v′j , vi′ ≥ v′j , c,c′, c  c′ i
, c  c′ j .,

Journal of Software  Vol.26, No.2, February 2015

358

.:
 2.  CharacterVecterGroup.
:

SymM: [v1′, v2′ ,..., v′n −1 , v′n ]Tn× m .
:

G:.
1:
2:

k←0, G←{∅}
foreach vi′ ∈ SymM

3:

Gk ← {vi′}

4:

foreach v′j ∈ SymM and j≠i

5:

if vi′ ≤ v′j or vi′ ≥ v′j

6:

Gk ← Gk ∪ v′j

7:

SymM ← SymM − v′j

8:
9:

endif
endfor

10:

G←G∪Gk

11:

k←k+1

12:

if SymM=∅
return G

13:
14:

endif

15: endfor
(7) 
 n ,, o(n2),
 n,.(local sensitive Hash, LSH)[20],
 , . LSH  , ,
 ,  ,
 .  (  )  , 
,.
, ||u−v||=1,

Pr(l ) = Pr[h(u ) = h(v)] = ∫

2.e

w
0

( l.

⎛ x⎞
−⎜ ⎟
⎝l⎠

)

2

x⎞
⎛
2π ⎜1 − ⎟
w
⎝
⎠

dx ,

a.u + b
. ,a ,w ,b  [0,w].
w
Pr(1)    l      ,   1 ≤ δ ,   Pr(1) ≥ p=Pr(δ ).       u,v,   :  ||u−v|| ≤ δ  ,

, h(u ) =

Pr[h(u)=h(v)]≥ p., δ , p ; δ
, p .,:

H:h=(h1,h2,…,hk).
 u (h1(u),h2(u),…,hk(u)),
⎡k
⎤
h(u ) = ⎢ ∑ri .hi (u ) ⎥ mod P,
⎣ i =1
⎦
,ri ,P ., δ , pk 

 :

359

; δ , pk . N  k 
, N . u  v 
,. N  1−pk,
 N , 0.,,
 Hash , δ ,
. 3  4 .
 3.  LSH  CharacterMatrixCloneDetectionBasedOnLSH.
:

SetM:;
SetM ′:.
:

RG:.
1:

RG←{∅}

2:

k←1

3:

//
foreach M ′ in SetM ′
foreach M in SetM

4:
5:

groupk←MLSH(SetM,M ′,δ,j)

6:

if |groupk|≥ 1

7:

RG←RG∪{groupk}
endif

8:
9:

k←k+1
endfor

10:

11: endfor
12: return RG
 4.  SetM ′.
:

M ′: SetM ′;
SetM:;

δ :;
G:.
:
 M ′.

1:

group←{∅}

2:

foreach M in SetM

//M.index  M  M ′
3:

M.index←{∅}

4:

endfor

5:

foreach Gi in G

//
6: foreach v′j in Gi
7:

SetM1←SetM

Journal of Software  Vol.26, No.2, February 2015

360

8:

while SetM1≠∅ do

9:

foreach M in SetM

10:

vecters←vecters∪M[j]

11:

endfor

// j ,,
 Matrix.

12:

Matrix←LSH(vecters,M ′[j],δ )

13:

foreach M in Matrix

14:

M.index←M.index∪{j}

15:

group←group∪{M}
SetM1←SetM1−M

16:
17:

endfor

18:

endwhile

19:

endfor

20: endfor
21: return group
(8) 
 , 
 7 .,.

3


 131 , linux kernel[20] 96  ,dhcp[21] 11 ,openssl[22] 8  ,

samba[18] 4 ,net-snmp[23] 2 ,bind[19] 10 , CVdetector . 2 
.
Table 2

CVdetector’s vulnerability code knowledge base
2

Cvdetector 


linux kernel
dhcp
openssl
samba
net-snmp
bind


96
11
8
4
2
10

CVdetector  bftpd[24],dnsmasq[25],openssh[26],ntp[27] 
android-kernel[28] 5 . 3 
.
Table 3

Basic information of CVdetector’s testing software
3


android-kernel
dnsmaq
ntp
openssh
bftp


2.3.3
2.47
4.2.2
5.8p1
1.6

CVdetector 

()
403
123
9
59
12

() () ()
2 111
29  44 
25  38 
392
5  14 
4  30 
58
12  23 
9  22 
67
87
76
12
1  12 
1  10 

 :

361

 3 ,

•

 (  ) 
,.

•

 (  )  ,  , 
,,.

 3 : 20%,,
.
 4  CVdetector  5 ,,“”、 “
 ”  2  ;  “  ” 
[29−31],“√” CVE ,“×” CVE .
Table 4

Clone vulnerability report about CVdetector’s testing software
CVdetector 

4

1
2
3
4
5
6
7
8
9
10


Dnsmasq
android-kernel
android-kernel
android-kernel
android-kernel
android-kernel
android-kernel
android-kernel
android-kernel
android-kernel


CVE-2009-2957
CVE-2009-2692
CVE-2011-4110
CVE-2009-2691
CVE-2010-0743
CVE-2010-3904
CVE-2010-3442
CVE-2010-2538
CVE-2009-1298
CVE-2009-4895














  
****
√
√
√
sock_sendpage
√
√
×
user_update
√
√
×
mm_formaps
√
√
×
isns_attr_query
√
√
×
rds_page_copy_user
√
×
×
snd_ctl_new
√
×
×
btrfs_ioctl_clone
√
×
×
ip_frag_reasm
√
×
×
tty_fasync
√
√
√

,, dnsmasq  1 
, android-kernel  9 ,、、、
;, 4 
、、, 8 .
 , , 
,. 5 , 403 , 9 ,
. 5  CVdetector  5 . 5 ,
.
Table 5

Module distribution of android-kernel vulnerability
5

Android-Kernel 














fs
init
mm
kernel
drivers
net
ipc
arch
crypto
sound


79
0
95
41
42
25
17
39
22
43

Journal of Software  Vol.26, No.2, February 2015

362

1800
1600
1400
(s)

1200
1000
800
600
400
200
0
0

0.5

1

1.5

2

2.5

3

3.5

4

(×105)

Fig.5

Relationship of CVdetector’s testing time and code scale
5

4



CVdetector 



 , 
 Cvdetector.CVdetector ,
 , , .
 , 
 , . ,CVdetector 
,.:CVdetector ,
.
References:
[1]

Tripathi A. Towards standardization of vulnerability taxonomy. In: Proc. of 2010 the 2nd Int’l Conf. on Computer Technology and
Development. 2010. 379−384. [doi: 10.1109/ICCTD.2010.5645826]

[2]

Howard M, LeBlanc D, Viega J, Wrote; Xiao FT, Yang MJ, Trans. 19 Deadly Sins of Software Security Programming Flaws and
How to Fix Them. Beijing: Qinghua University Press, 2006 (in Chinese).

[3]

Viega J, Bloch JT, Kohno Y, McGraw G. Its4: A static vulnerability scanner for c and c++ code. In: Proc. of the 16th Annual
Computer Security Applications Conf. (ACSAC 2000). Washington: IEEE Computer Society, 2000. [doi: 10.1109/ACSAC.2000.
898880]

[4]

software R. RATs. http://www.securesw.com/rats/

[5]

Dwheeler. Flawfinder software. 2007. http://sourceforge.net/projects/flawfinder/

[6]

Aiken A, Bugrara S, Dillig I. Saturn project. http://saturn.stanford.edu

[7]

Rose/Compass static analysis tools user manual. http://www.rosecompiler.org/compass.pdf

[8]

,,..:,2014,44:108−129. [doi:
10.1360/N112013-00095]

[9]

Roy CK, Cordy JR, Koschke R. Comparison and evaluation of code clone detection techniques and tools: A qualitative approach.

[10]

Nguyen TT, Nguyen HA, Pham NH, Al-Kofahi JM, Nguyen TN. Recurring bug fixes in object oriented programs. In: Proc. of the

Science of Computer Programming, 2009,74(7):470−495. [doi: 10.1016/j.scico.2009.02.007]

Int’l Conf. on Software Engineering (ICSE 2010). ACM Press, 2010. 315−324. [doi: 10.1145/1806799.1806847]

 :

[11]

363

Pham NH, Nguyen TT, Nguyen HA, Nguyen TN. Detection of recurring software vulnerabilities. In: Proc. of the Int’l Conf. on
Automated Software Engineering. ACM Press, 2010. 447−456. [doi: 10.1145/1858996.1859089]

[12]

Li J, Ernst MD. CBCD: Cloned buggy code detector. In: Proc. of the Int’l Conf. on Software Engineering. 2012. [doi: 10.1109/
ICSE.2012.6227183]

[13]

Sliwerski J, Zimmermann T, Zeller A. When do changes induce fixes? In: Proc. of the 2nd Int’l Workshop on Mining Software
Repositories. 2005. 24−28. [doi: 10.1145/1083142.1083147]

[14]

Google code search engine. http://www.google.com/codesearch

[15]

CodeSurfer. http://www.grammatech.com/products/codesurfer/overview.html

[16]

Horwitz SB. Interprocedural slicing using dependence graphs. ACM Trans. on Programming Languages and Systems, 1990,12(1):
26−60. [doi: 10.1145/77606.77608]

[17]

Jiang L, Misherghi G, Su Z, Glondu S. Deckard: Scalable and accurate tree-based detection of code clones. In: Proc. of the ICSE
2007. IEEE Computer Society, 2007. 96−105. [ doi: 10.1109/ICSE.2007.30]

[18]

Samba software. http://www.samba.org/

[19]

Bind software. http://www.isc.org/software/bind

[20]

The linux kernel archives. https://www.kernel.org/

[21]

Dhcp software. http://www.isc.org/software/dhcp

[22]

Openssl software. http://www.openssl.org/

[23]

Net-Snmp software. http://www.net-snmp.org/

[24]

Bftpd software. http://freecode.com/projects/bftpd

[25]

Dnsmasq software. http://www.thekelleys.org.uk/dnsmasq/doc.html

[26]

Openssh software. http://www.openssh.org/

[27]

Ntp software. http://www.ntp.org/

[28]

Android-Kernel source code. http://source.android.com/source/building-kernels.html

[29]

Inc C. Coverity. http://www.coverity.com/

[30]

Bessey A, Block K, Chelf B, Engler D. A few billion lines of code later: using static analysis to find bugs in the real world.
Communications of the ACM, 2010,53(2):66−75. [doi: 10.1145/1646353.1646374]

[31]

Inc G. codesonar software. http://www.grammatech.com/products/codesonar/overview.html

:
[2]

Howard M,LeBlanc D,Viega J,;,,.—— 19 .:,2006.

(1986－),, ,,

(1957－),,,

,CCF ,

,,CCF ,

,.

,.

(1975－),,,,CCF

(1973－),,,,CCF 

,.

,
,,.